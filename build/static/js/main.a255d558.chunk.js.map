{"version":3,"sources":["logo.svg","components/Image/upload.js","containers/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","pageStyle","margin","carContainerStyle","maxWidth","border","display","justifyContent","lpContainerStyle","UploadImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","file","imagePreviewUrl","imageResultUrl","detectResult","loading","setState","e","_this2","preventDefault","console","log","formData","FormData","append","axios","post","headers","content-type","then","response","alert","data","imageUrl","result","catch","error","errorMsg","msg","resetState","_this3","reader","FileReader","target","files","onloadend","readAsDataURL","_this4","_this$state","$imagePreview","$imageResult","$loading","react_default","a","createElement","lib_default","src","height","width","className","onSubmit","_handleSubmit","type","accept","onChange","_handleImageChange","onClick","disabled","style","React","Component","ImageContainer","upload","App","Image","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCclCC,EAAY,CACdC,OAAQ,QAGNC,EAAoB,CACtBC,SAAU,QACVF,OAAQ,OACRG,OAAQ,YACRC,QAAS,OACTC,eAAgB,UAGdC,EAAmB,CACrBJ,SAAU,QACVF,OAAQ,OACRG,OAAQ,YACRC,QAAS,OACTC,eAAgB,UAoKLE,cAhKX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,GACNC,gBAAiB,GACjBC,eAAgB,GAChBC,aAAc,GACdC,SAAS,GAPIZ,4EAafG,KAAKU,SAAS,CACVL,KAAM,GACNC,gBAAiB,GACjBC,eAAgB,GAChBC,aAAc,GACdC,SAAS,0CAIHE,GAAG,IAAAC,EAAAZ,KAGb,GAFAW,EAAEE,iBACFC,QAAQC,IAAI,oBAAqBf,KAAKI,MAAMC,MACtB,MAAnBL,KAAKI,MAAMC,MAAmC,IAAnBL,KAAKI,MAAMC,KAAzC,CAMA,IAAMW,EAAW,IAAIC,SACrBD,EAASE,OAAO,MAAMlB,KAAKI,MAAMC,MAQjCL,KAAKU,SAAS,CAACD,SAAQ,IACvBU,IAAMC,KAhEF,yCAgEWJ,EAPA,CACXK,QAAS,CACLC,eAAgB,yBAMnBC,KAAK,SAACC,GACHC,MAAM,qCACNb,EAAKF,SAAS,CACVH,eAAgBiB,EAASE,KAAKC,SAC9BnB,aAAcgB,EAASE,KAAKE,OAC5BnB,SAAS,MAEdoB,MAAM,SAACC,GACN,IAAIC,EAAWD,EACM,MAAlBA,EAAMN,UAA2C,MAAvBM,EAAMN,SAASE,OACxCK,GAAY,KAAKD,EAAMN,SAASE,KAAKM,KACzCP,MAAMM,GACNjB,QAAQC,IAAI,WAAWgB,GACvBnB,EAAKqB,oBA7BTR,MAAM,oEAmCKd,GAAG,IAAAuB,EAAAlC,KAClBW,EAAEE,iBAEF,IAAIsB,EAAS,IAAIC,WACb/B,EAAOM,EAAE0B,OAAOC,MAAM,GAE1B,GAAW,IAARjC,GAAsB,MAARA,GAAgBA,GAAQL,KAAKI,MAAMC,KAGhD,OAFAS,QAAQC,IAAI,WAAYV,QACxBL,KAAKiC,aAKTE,EAAOI,UAAY,WACnBL,EAAKxB,SAAS,CACVL,KAAMA,EACNC,gBAAiB6B,EAAOP,UAI5BO,EAAOK,cAAcnC,oCAGhB,IAAAoC,EAAAzC,KAAA0C,EAC2C1C,KAAKI,MAAhDE,EADAoC,EACApC,gBAAiBC,EADjBmC,EACiBnC,eAAeE,EADhCiC,EACgCjC,QACjCkC,EAAgB,KAAMC,EAAe,KACrCC,EAAW,KAkCf,OA/BIF,EADArC,EAEQwC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,IAAK5C,EACL6C,OAAQ,IACRC,MAAO,MAIFN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAf,sCAIjBT,EADArC,EAEIuC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACIG,IAAK3C,EACL4C,OAAQ,IACRC,MAAO,MAICN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAf,sCAGhBR,EADqB,GAAtB7C,KAAKI,MAAMK,QACEqC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACXP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,uCACbP,EAAAC,EAAAC,cAAA,6BAGJF,EAAAC,EAAAC,cAAA,YAIZF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,oBACXP,EAAAC,EAAAC,cAAA,QAAMM,SAAU,SAAC3C,GAAD,OAAK8B,EAAKc,cAAc5C,KACpCmC,EAAAC,EAAAC,cAAA,SAAOK,UAAU,YACbG,KAAK,OACLC,OAAO,UACPC,SAAU,SAAC/C,GAAD,OAAK8B,EAAKkB,mBAAmBhD,MAC3CmC,EAAAC,EAAAC,cAAA,UAAQK,UAAU,eACdG,KAAK,SACLI,QAAS,SAACjD,GAAD,OAAK8B,EAAKc,cAAc5C,IACjCkD,SAAUpD,GACTA,GAAWqC,EAAAC,EAAAC,cAAA,4BACVvC,GAAWqC,EAAAC,EAAAC,cAAA,+BAGrBF,EAAAC,EAAAC,cAAA,WACKH,GAELC,EAAAC,EAAAC,cAAA,OAAKc,MAAO3E,GACR2D,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAAaS,MAAOzE,GAC9BsD,GAELG,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAAaS,MAAOpE,GAC9BkD,IAITE,EAAAC,EAAAC,cAAA,gCACmD,IAA3BhD,KAAKI,MAAMI,cAAwC,IAAlBD,EAAuB,gBAAkBP,KAAKI,MAAMI,sBAxJnGuD,IAAMC,WClBjBC,cAZX,SAAAA,EAAYrE,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,GAAAnE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KACTJ,0EAIN,OACIkD,EAAAC,EAAAC,cAACkB,EAAD,aAPiBH,IAAMC,WCapBG,MAXf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,mCAGAF,EAAAC,EAAAC,cAACoB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.a255d558.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\nimport Image from 'react-image-resizer';\r\nimport axios from 'axios';\r\n// ip address\r\nconst deployment = '39.108.80.53'\r\nconst development = '10.6.71.125'\r\nconst astri_wifi = '10.6.77.72'\r\nconst ust_wifi = '10.89.90.43'\r\n// const ip = deployment\r\n// const ip = ust_wifi\r\nconst ip = 'localhost'\r\nconst port = '5000'\r\nconst url = 'http://'+ip+':'+port+'/api/image/upload'\r\n\r\nconst pageStyle = {\r\n    margin: 'auto'\r\n}\r\n\r\nconst carContainerStyle = { \r\n    maxWidth: '360px',\r\n    margin: 'auto',\r\n    border: '2px solid',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n}\r\n\r\nconst lpContainerStyle = { \r\n    maxWidth: '360px',\r\n    margin: 'auto',\r\n    border: '2px solid',\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n}\r\n\r\nclass UploadImage extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          file: '',\r\n          imagePreviewUrl: '',\r\n          imageResultUrl: '',\r\n          detectResult: '',\r\n          loading: false\r\n        };\r\n      \r\n    }\r\n\r\n    resetState() {\r\n        this.setState({\r\n            file: '',\r\n            imagePreviewUrl: '',\r\n            imageResultUrl: '',\r\n            detectResult: '',\r\n            loading: false\r\n        })\r\n    }\r\n    \r\n    _handleSubmit(e) {\r\n        e.preventDefault();\r\n        console.log('handle uploading-', this.state.file);\r\n        if(this.state.file == null || this.state.file == ''){\r\n            alert(\"Please Select Picture\")\r\n            return\r\n        }\r\n            \r\n\r\n        const formData = new FormData();\r\n        formData.append('img',this.state.file);\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        };\r\n        \r\n        this.setState({loading:true})\r\n        axios.post(url,formData,config)\r\n            .then((response) => {\r\n                alert(\"The file is successfully uploaded\");\r\n                this.setState({\r\n                    imageResultUrl: response.data.imageUrl,\r\n                    detectResult: response.data.result,\r\n                    loading: false\r\n                })\r\n            }).catch((error) => {\r\n                let errorMsg = error\r\n                if(error.response != null && error.response.data != null)\r\n                    errorMsg += \"\\n\"+error.response.data.msg\r\n                alert(errorMsg)\r\n                console.log(\"[ERROR] \",errorMsg)\r\n                this.resetState()\r\n                // this.setState({loading:false})\r\n                // window.location.reload()\r\n        });\r\n    }\r\n  \r\n    _handleImageChange(e) {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n        \r\n        if(file == '' || file == null || file == this.state.file){\r\n            console.log(\"canceled\", file)\r\n            this.resetState()\r\n            return\r\n        }\r\n            \r\n\r\n        reader.onloadend = () => {\r\n        this.setState({\r\n            file: file,\r\n            imagePreviewUrl: reader.result\r\n        });\r\n        }\r\n\r\n        reader.readAsDataURL(file)\r\n    }\r\n  \r\n    render() {\r\n        let {imagePreviewUrl, imageResultUrl,loading} = this.state;\r\n        let $imagePreview = null, $imageResult = null;\r\n        let $loading = null;\r\n\r\n        if (imagePreviewUrl) {\r\n            $imagePreview = (\r\n                    <Image\r\n                        src={imagePreviewUrl}\r\n                        height={240}\r\n                        width={360}\r\n                    />\r\n                );\r\n        } else {\r\n            $imagePreview = (<div className=\"previewText\">Please select an Image for Preview</div>);\r\n        }\r\n\r\n        if (imageResultUrl) {\r\n            $imageResult = (\r\n                <Image\r\n                    src={imageResultUrl}\r\n                    height={240}\r\n                    width={360}\r\n                />\r\n            );\r\n        } else {\r\n            $imageResult = (<div className=\"previewText\">Please select an Image for Preview</div>);\r\n        }\r\n        if(this.state.loading == true){\r\n            $loading = (<div className=\"loader center\">\r\n                            <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\" />\r\n                            <h4>Please Wait...</h4>\r\n                        </div>)\r\n        }else{\r\n            $loading = (<div></div>)\r\n        }\r\n  \r\n        return (\r\n            <div className=\"previewComponent\">\r\n                <form onSubmit={(e)=>this._handleSubmit(e)}>\r\n                    <input className=\"fileInput\" \r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={(e)=>this._handleImageChange(e)} />\r\n                    <button className=\"submitButton\" \r\n                        type=\"submit\" \r\n                        onClick={(e)=>this._handleSubmit(e)}\r\n                        disabled={loading}>\r\n                        {loading && <span>Please Wait</span>}\r\n                        {!loading && <span>Process Image</span>}\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    {$loading}\r\n                </div>\r\n                <div style={pageStyle}>\r\n                    <h3>Preview</h3>\r\n                    <div className=\"imgPreview\" style={carContainerStyle}>\r\n                        {$imagePreview}\r\n                    </div>\r\n                    <h3>Processed</h3>\r\n                    <div className=\"imgPreview\" style={lpContainerStyle}>\r\n                        {$imageResult}\r\n                    </div>\r\n                </div>\r\n\r\n                <h2>\r\n                    Detection result : {this.state.detectResult == '' && imageResultUrl != '' ? \"CANNOT DETECT\" : this.state.detectResult}\r\n                </h2>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n    \r\nexport default UploadImage\r\n","import React from 'react'\r\nimport ImageUpload from '../../components/Image/upload'\r\n\r\nclass ImageContainer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <ImageUpload/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ImageContainer","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ImageContainer from './containers/Image'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>\r\n        HKUST People Counting\r\n      </h1>\r\n      <ImageContainer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}